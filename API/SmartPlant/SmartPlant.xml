<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartPlant</name>
    </assembly>
    <members>
        <member name="M:SmartPlant.Controllers.AccountController.Register(SmartPlant.Models.API_Model.UserRegistrationDto)">
            <summary>
            Registers a user to the database, sends a confirmation email .
            </summary>
            <remarks>
            This takes in a URI, e.g. website.com/confirmEmail , and attaches the confirmation token and email as a querystring. This 
            gets sent as the confirmation link in the email and should be routed to the frontend confirmation webpage. &#xA;
            The only required inputs are the Email, Password, Confirmation Password. &#xA;
            &#xA;
            First name, last name, and phone number are optional and can be left blank.&#xA;
            &#xA;
            If included, &#xA;
            First Name and Last Name can only contain letters, no special characters or numbers, max length of 50. &#xA;
            Phone Numbers must begin with [02, 03, 04, 07, 08] followed by 8 digits. Length must equal 10.
            </remarks>
            <param name="userRegDto"></param>
            <response code="200">Successfully Registers User</response>
            <response code="400">Invalid Registration input</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.ConfirmEmail(SmartPlant.Models.API_Model.Account.ConfirmEmailDto)">
            <summary>
            Confirms a user's email 
            </summary>
            <remarks>Required to login</remarks>        
            <response code="200">Successfully Logged In</response>
            <response code="400">Failed to login</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.Login(SmartPlant.Models.API_Model.Account.UserForAuthenticationDto)">
            <summary>
            Logs the user in, returns a Json Web Token in the response body
            </summary>
            <remarks>The JWT must be stored (local storage?) and used with every API endpoint that requires authentication.
            Pass the token through in the header with authorization type bearer e.g.&#xA; 
            'headers': { &#xA;
                ...
                'Authorization': 'Bearer [INSERT TOKEN HERE]', &#xA;
                'Content-Type': 'application/json' &#xA;
                }
            </remarks>
            <response code="200">Successfully Logged In</response>
            <response code="401">Invalid Login Details</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.ForgotPassword(SmartPlant.Models.API_Model.Account.ForgotPasswordDto)">
            <summary>
            Sends a confirmation email with a password reset token to the user.
            </summary>
            <remarks>The also takes in a URI, which would be the route for the frontend 'confirm reset password' page.
            To that URI it attaches a querystring with the user's email and password reset token.
            </remarks>
            <response code="200">Reset Email Sent</response>
            <response code="400">Invalid Details</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.ResetPassword(SmartPlant.Models.API_Model.Account.ResetPasswordDto)">
            <summary>
            Resets the user's password
            </summary>
            <remarks>
            This takes in a password and confirmed password, and the token + email from the 'forgot password' email.&#xA;
            The token is probably html encoded e.g. '/' becomes %2F in the URL  &#xA;
            needs to be decoded before using
            </remarks>
            <response code="200">Password Reset</response>
            <response code="400">Something went wrong, incorrect info</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.GetDetails">
            <summary>
            Gets the logged in user's details
            </summary>
            <remarks>Returns user details (First name, last name, email, phone number)
            </remarks>
            <response code="200">Success</response>
            <response code="404">Something went wrong, user not found</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.UpdateDetails(SmartPlant.Models.API_Model.Account.UpdateUserDetailsDto)">
            <summary>
            Updates non-important details (First name, last name, address, phone number)
            </summary>
            <remarks>This is used for updating non-important user details. Since the email address is used to login, it has its own method
            &#xA;
            First Name and Last Name can only contain letters, no special characters or numbers, max length of 50. &#xA;
            Phone Numbers must begin with [02, 03, 04, 07, 08] followed by 8 digits. Length must equal 10.
            </remarks>
            <response code="200">Success</response>
            <response code="400">Something went wrong, user not found</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.UpdateEmail(SmartPlant.Models.API_Model.Account.UpdateEmailDto)">
            <summary>
            Updates the logged in user's email
            </summary>
            <remarks>The new email will be required for future logins. -No confirmation email sent.
            </remarks>
            <response code="200">Email changed or same as current</response>
            <response code="400">Bad input, or email already taken</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.UpdatePassword(SmartPlant.Models.API_Model.Account.UpdatePasswordDto)">
            <summary>
            Updates the logged in user's password
            </summary>
            <remarks>
            </remarks>
            <response code="200">Password Changed</response>
            <response code="400">Passwords don't match</response>
            <response code="401">Old password Incorrect</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.ContactSupport(SmartPlant.Models.API_Model.SupportEmailDto)">
            <summary>
            Sends an email to support -- currently the email used is SmartPlantTeam4@gmail.com
            </summary>
            <remarks>
            This requires a logged in user to use.
            </remarks>
            <response code="200">Email Sent</response>
            <response code="400">Something went wrong</response>
            <response code="401"></response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminGetAllUsers">
            <summary>
            Gets a list of all Users and their details (User Id, Email)
            </summary>
            <remarks>
            </remarks>
            <response code="200">Sucess</response>
            <response code="404">No Users Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminGetUserDetails(System.String)">
            <summary>
            Gets info for a specific user (First name, last name, address, phone number)
            </summary>
            <remarks>
            </remarks>
            <response code="200">User Found</response>
            <response code="404">User Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminUpdateDetails(SmartPlant.Models.API_Model.Admin.AdminUpdateUserDetailsDto)">
            <summary>
            Used to update a user's details (First name, last name, address, phone number, email)
            </summary>
            <remarks>Since this is an admin action, no verification needed for changing emails
            &#xA;
            If included, &#xA;
            First Name and Last Name can only contain letters, no special characters or numbers, max length of 50. &#xA;
            Phone Numbers must begin with [02, 03, 04, 07, 08] followed by 8 digits. Length must equal 10.
            </remarks>
            <response code="200">Details successfully updated</response>
            <response code="400">User Not Found or email already in use</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminGetRoleList">
            <summary>
            Gets a list of users and their roles (userID, email, role)
            </summary>
            <remarks>Currently there are only 2 roles, User and Admin
            </remarks>
            <response code="200">Success</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminUpdateRole(SmartPlant.Models.API_Model.Admin.AdminUpdateUserRoleDto)">
            <summary>
            Used to update a user's role
            </summary>
            <remarks>Elevate a user to an Admin, or vice versa
            </remarks>
            <response code="200">Role Updated</response>
            <response code="400">Failed to update</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminUpdatePassword(SmartPlant.Models.API_Model.Admin.AdminUpdatePasswordDto)">
            <summary>
            Change a user's password
            </summary>
            <remarks>Takes in a userID, a new password, and a confirmation password
            </remarks>
            <response code="200">Password Updated</response>
            <response code="400">Passwords don't match</response>
            <response code="404">UserID Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.AccountController.AdminDeleteUser(System.String)">
            <summary>
            Deletes a User
            </summary>
            <remarks>Deleting a user will cascade delete all connected plants, which will delete all connected sensor data.
            </remarks>
            <response code="200">User Deleted</response>
            <response code="400">Bad Data</response>
            <response code="404">UserID Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.Get">
            <summary>
            Gets all plants belonging to the current user
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="404">No Plants Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.Post(SmartPlant.Models.API_Model.Plant.AddPlantDto)">
            <summary>
            Adds a plant
            </summary>
            <remarks>
            Takes in a plant name (maxlength 250 - nullable) - this can be excluded but is intended help user readabillity  e.g. "office building 2 - floor 3 - Meeting room 2 - Peace Lily" &#xA;
            This should be used when the user chooses to add a plant. Autogenerates the plant ID. &#xA;
            The user should then copy and paste the new plant ID into an arduino setup file?
            </remarks>
            <response code="201">Plant Created</response>
            <response code="400">Bad Data</response>
            <response code="409">Max plant limit hit (currently set to 5)</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.Update(SmartPlant.Models.API_Model.Plant.UpdatePlantDto)">
            <summary>
            Updates a plants name
            </summary>
            <remarks>
            This takes in a plant ID and a string name --this can be excluded, making the name param null (no name)
            </remarks>
            <response code="200">Name changed</response>        
            <response code="404">Plant Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.Delete(System.String)">
            <summary>
            Deletes a plant that belongs to the user
            </summary>
            <remarks>Deleting a plant will cascade delete all related sensor data, this is permanent.
            </remarks>
            <response code="200">Plant Deleted</response>
            <response code="403">Plant Does Not Belong To User</response>
            <response code="404">PlantID Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.GetToken(System.String)">
            <summary>
            Gets a plants plant token, for use updating sensor data from the Arduino hardware
            </summary>
            <remarks>
            For security purposes, this should only be shown if a user asks to see their token &#xA;
            since this is used to for updating sensor data it is sensitive information.
            </remarks>
            <response code="200">Returns the token</response>
            <response code="404">PlantID Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.GenerateNewPlantToken(System.String)">
            <summary>
            Generates a new token for a plant
            </summary>
            <remarks>
            This will invalidate the old token, &#xA;
            On the frontend, a warning message should be displayed &#xA;
            warning the user and confirming that they want to generate a new token.
            </remarks>
            <response code="200">New token generated, returns new token</response>
            <response code="404">Something went wrong, probably invalid plantid</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminGetAll">
            <summary>
            Gets a list of all plants (plantID, userID)
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="404">No Plants Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminGet(System.String)">
            <summary>
            Gets plants for a specific user
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="404">No Plants Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminPost(SmartPlant.Models.API_Model.AdminAddPlantDto)">
            <summary>
            Adds a plant for a specific user
            </summary>
            <remarks>
            Takes in a plant name (maxlength 250 - nullable) - this can be excluded but is intended help user readabillity  e.g. "office building 2 - floor 3 - Meeting room 2 - Peace Lily"
            and user ID
            </remarks>
            <response code="201">Plant Created</response>
            <response code="404">UserID Not Found</response>
            <response code="409">Max Plant Limit Hit</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminUpdate(SmartPlant.Models.API_Model.Plant.UpdatePlantDto)">
            <summary>
            Updates a plants name
            </summary>
            <remarks>
            This takes in a plant ID and a string name --this can be excluded, making the name param null (no name)
            </remarks>
            <response code="200">Name changed</response>        
            <response code="404">Plant Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminDelete(System.String)">
            <summary>
            Deletes a plant
            </summary>
            <remarks>Deleting a plant will delete all related sensor data
            </remarks>
            <response code="200">Plant Deleted</response>
            <response code="404">Plant Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.PlantController.AdminGenerateNewPlantToken(System.String,System.String)">
            <summary>
             Generates a new token for a plant
             </summary>
             <remarks>
             This will invalidate the old token, &#xA;
             On the frontend, a warning message should be displayed &#xA;
             warning the user and confirming that they want to generate a new token.
             </remarks>
             <response code="200">New token generated, returns new token</response>
             <response code="404">Something went wrong, probably invalid plantID or userID</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.GetAll">
            <summary>
            Gets all sensor data for every plant belonging to the user
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="400"></response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.GetAllForPlant(System.String)">
            <summary>
            Gets all sensor data for a specific plant belonging to the user
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="400"></response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.GetDaily(System.String)">
            <summary>
            Gets daily sensor data for a plant belonging to the user
            </summary>
            <remarks> Based on current day
            </remarks>
            <response code="200">Success</response>
            <response code="400"></response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.GetMonthly(System.String)">
            <summary>
            Gets monthly sensor data for a plant belonging to the user
            </summary>
            <remarks> Based on current month
            </remarks>
            <response code="200">Success</response>
            <response code="400"></response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.Post(SmartPlant.Models.API_Model.SensorDataModel)">
            <summary>
            Adds sensor data for a plant belonging to the user
            </summary>
            <remarks>
            For testing, use  &#xA;
            ----------------------&#xA;
            Sensor data is stored as decimals, with 2 decimal places. &#xA; 
            For example: 12.446 becomes 12.45. &#xA; 
                         33.44469123 becomes 33.44.
            </remarks>
            <response code="201">Sensor Data Created</response>
            <response code="400">Bad Data / Format</response>
            <response code="404">PlantID Not Found</response>
            <response code="429">Wait at least 5 mins between updates</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.PostWithToken(SmartPlant.Models.API_Model.SensorData.SensorDataWithTokenDto)">
            <summary>
            Adds sensor data for a plant belonging to the user - using a plant token for authentication
            </summary>
            <remarks> 
            This should be used from the Arduino code to update the database with sensor data &#xA; 
            Sensor data is stored as decimals, with 2 decimal places. &#xA; 
            For example: 12.446 becomes 12.45. &#xA; 
                         33.44469123 becomes 33.44.
            </remarks>
            <response code="201">Sensor Data Created</response>
            <response code="400">Bad Data / Format</response>
            <response code="401">Bad Plant Token or too soon for sensor update</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.AdminGetAll">
            <summary>
            Gets all sensor data for all plants
            </summary>
            <remarks> 
            </remarks>
            <response code="200">Success</response>        
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.AdminGetAllForPlant(System.String)">
            <summary>
            Gets sensor data for a specific plantID
            </summary>
            <remarks>
            </remarks>
            <response code="200">Success</response>
            <response code="404">PlantID Not Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.AdminGetDaily(System.String)">
            <summary>
            Gets daily sensor data for a specific plantID
            </summary>
            <remarks> Based on the current date
            </remarks>
            <response code="200">Success</response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.AdminGetMonthly(System.String)">
            <summary>
            Gets monthly sensor data for a specific plantID
            </summary>
            <remarks> Based on the current date
            </remarks>
            <response code="201">Success</response>
            <response code="404">PlantID Not Found</response>
            <response code="429"></response>
        </member>
        <member name="M:SmartPlant.Controllers.SensorDataController.AdminPost(SmartPlant.Models.API_Model.SensorDataModel)">
            <summary>
            Adds sensor data -- this is just used for testing 
            </summary>
            <remarks> 
            </remarks>
            <response code="200">Success</response>
            <response code="404">No Sensor Data Found</response>
        </member>
        <member name="M:SmartPlant.Models.DataManager.AccountManager.UpdatePassword(System.String,SmartPlant.Models.API_Model.Account.UpdatePasswordDto)">
            <summary>
            Updates a users password.
            </summary>
            <param name="userID"></param>
            <param name="passwordDto"></param>
            <returns>
            An IdentityResult
            </returns>
        </member>
    </members>
</doc>
