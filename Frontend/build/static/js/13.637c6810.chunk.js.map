{"version":3,"sources":["hooks/all_users/all_users.jsx"],"names":["AllUsers","props","getLogin","wideView","Pagination","lazy","useState","users","setUsers","useEffect","document","title","login","token","admin","axios","get","headers","Authorization","then","res","foundUsers","data","length","sortedUsers","sort","a","b","emailA","email","emailB","catch","err","window","location","pathname","className","style","color","fallback","items","itemID","heading1","heading2","imageCol","itemTitle1","itemTitle2","path"],"mappings":"6NAIe,SAASA,EAASC,GAC/B,IAAQC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAGZC,EAAaC,gBAAK,kBAAM,gCAG9B,EAA0BC,mBAAS,oBAAnC,mBAAOC,EAAP,KAAcC,EAAd,KA+CA,OA1CAC,qBAAU,WACRC,SAASC,MAAQ,oCAEjB,IAAMC,EAAQV,IACd,GAAc,OAAVU,EAAgB,CAClB,IAAQC,EAAiBD,EAAjBC,MAAiBD,EAAVE,MAGbC,IACGC,IAAI,4DAA6D,CAChEC,QAAS,CACPC,cAAc,UAAD,OAAYL,MAG5BM,MAAK,SAACC,GACL,IAAMC,EAAaD,EAAIE,KACvB,GAAID,EAAWE,OAAS,EAAG,CACzB,IAAMC,EAAcH,EAAWI,MAAK,SAACC,EAAGC,GACtC,IAAMC,EAASF,EAAEG,MACfC,EAASH,EAAEE,MACb,OAAOD,EAASE,GAAU,EAAIF,EAASE,EAAS,EAAI,KAEtDtB,EAASgB,QAEThB,EAAS,wBAGZuB,OAAM,SAACC,GACNxB,EACE,2EAINyB,OAAOC,SAASC,SAAW,SAG7BF,OAAOC,SAASC,SAAW,MAI5B,IAGD,oCACE,oBAAIC,UAAU,mBAAd,mBACkB,kBAAV7B,EACN,qBACE6B,UAAWjC,EAAW,mBAAqB,wBAC3CkC,MAAO,CAAEC,MAAO,SAFlB,SAIG/B,IAGH,cAAC,WAAD,CAAUgC,SAAU,wBAApB,SACE,cAACnC,EAAD,CACEoC,MAAOjC,EACPkC,OAAO,KACPC,SAAS,QACTC,SAAS,OACTC,UAAU,EACVC,WAAW,QACXC,WAAW,OACXC,KAAK,OACL5C,SAAUA","file":"static/js/13.637c6810.chunk.js","sourcesContent":["import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./all_users.css\";\n\nexport default function AllUsers(props) {\n  const { getLogin, wideView } = props;\n\n  // Constant for the lazy-loaded dynamic import of the Pagination hook. This enables good code-splitting and faster page loading.\n  const Pagination = lazy(() => import(\"../pagination/pagination\"));\n\n  // State variable for Demeter's users. Initially set to 'Loading users...' while the users are being fetched from the backend.\n  const [users, setUsers] = useState(\"Loading users...\");\n\n  // useEffect hook that runs a single time when this component loads. Sets the title of the web page appropriately, then performs a check on whether the user is logged in and an administrator on the UI. If not, the user is returned to the root path.\n  // Otherwise, a GET request is made to Users admin endpoint of the backend. If this request is unsuccessful, the users state variable is set to an appropriate error message.\n  // Otherwise, the users state variable is updated with the sorted value of the returned users array.\n  useEffect(() => {\n    document.title = \"Users | Demeter - The plant meter\";\n\n    const login = getLogin();\n    if (login !== null) {\n      const { token, admin } = login;\n\n      if (admin) {\n        axios\n          .get(\"https://smart-plant.azurewebsites.net/api/Admin/User/Role\", {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          })\n          .then((res) => {\n            const foundUsers = res.data;\n            if (foundUsers.length > 0) {\n              const sortedUsers = foundUsers.sort((a, b) => {\n                const emailA = a.email,\n                  emailB = b.email;\n                return emailA < emailB ? -1 : emailA > emailB ? 1 : 0;\n              });\n              setUsers(sortedUsers);\n            } else {\n              setUsers(\"No current users.\");\n            }\n          })\n          .catch((err) => {\n            setUsers(\n              \"There was an error retrieving the user data. Please try again later.\"\n            );\n          });\n      } else {\n        window.location.pathname = \"/\";\n      }\n    } else {\n      window.location.pathname = \"/\";\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <section>\n      <h1 className=\"text-center gold\">Users</h1>\n      {typeof users === \"string\" ? (\n        <div\n          className={wideView ? \"text-center mt-3\" : \"text-center mt-3 mb-2\"}\n          style={{ color: \"white\" }}\n        >\n          {users}\n        </div>\n      ) : (\n        <Suspense fallback={<div></div>}>\n          <Pagination\n            items={users}\n            itemID=\"id\"\n            heading1=\"Email\"\n            heading2=\"Role\"\n            imageCol={false}\n            itemTitle1=\"email\"\n            itemTitle2=\"role\"\n            path=\"user\"\n            wideView={wideView}\n          ></Pagination>\n        </Suspense>\n      )}\n    </section>\n  );\n}\n"],"sourceRoot":""}