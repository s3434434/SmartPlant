{"version":3,"sources":["hooks/support/support.jsx"],"names":["Support","props","getLogin","wideView","useState","EmailSubject","EmailBody","form","setForm","showStatus","setShowStatus","status","setStatus","useEffect","document","title","window","location","pathname","handleChange","e","input","target","tempForm","_","cloneDeep","name","value","className","onSubmit","preventDefault","login","token","axios","post","headers","Authorization","then","res","catch","err","errorMessage","errors","response","data","undefined","setTimeout","htmlFor","type","onChange","required"],"mappings":"8OAKe,SAASA,EAAQC,GAC9B,IAAQC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAGlB,EAAwBC,mBAAS,CAC/BC,aAAc,GACdC,UAAW,KAFb,mBAAOC,EAAP,KAAaC,EAAb,KAIA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BN,mBAAS,KAArC,mBAAOO,EAAP,KAAeC,EAAf,KAGAC,qBAAU,WACRC,SAASC,MAAQ,sCAEE,OAAfb,MACFc,OAAOC,SAASC,SAAW,OAI5B,IAGH,IAAMC,EAAe,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OACVC,EAAWC,IAAEC,UAAUlB,GAC7BgB,EAASF,EAAMK,MAAQL,EAAMM,MAC7BnB,EAAQe,IA6CV,OACE,oCACE,oBAAIK,UAAU,mBAAd,qBACA,uBACEA,UAAWzB,EAAW,mBAAqB,mBAC3C0B,SA9Ce,SAACT,GACpBA,EAAEU,iBACFlB,EAAU,kBACVF,GAAc,GAEd,IAAMqB,EAAQ7B,IACd,GAAc,OAAV6B,EAAgB,CAClB,IAAQC,EAAUD,EAAVC,MACRC,IACGC,KACC,gEACA3B,EACA,CACE4B,QAAS,CACPC,cAAc,UAAD,OAAYJ,MAI9BK,MAAK,SAACC,GACLtB,OAAOC,SAASC,SAAW,yBAE5BqB,OAAM,SAACC,GACN,IAAIC,EAAe,wCACbC,EAASF,EAAIG,SAASC,KAAKF,YAELG,IAAxBH,EAAOrC,aACToC,EAAeC,EAAOrC,aAAa,QACLwC,IAArBH,EAAOpC,YAChBmC,EAAeC,EAAOpC,UAAU,IAGlCM,EAAU6B,WAGd7B,EAAU,0BACVkC,YAAW,WACT9B,OAAOC,SAASC,SAAW,MAC1B,MAOH,UAIE,uBAAOU,UAAU,kBAAkBmB,QAAQ,eAA3C,qBAGA,uBACEnB,UAAU,eACVF,KAAK,eACLsB,KAAK,OACLrB,MAAOpB,EAAKF,aACZ4C,SAAU9B,EACV+B,UAAQ,IAEV,uBAAOtB,UAAU,uBAAuBmB,QAAQ,YAAhD,qBAGA,0BACEnB,UAAU,eACVF,KAAK,YACLC,MAAOpB,EAAKD,UACZ2C,SAAU9B,EACV+B,UAAQ,IAGTzC,EACC,qBAAKmB,UAAU,mBAAf,SACE,+BAAOjB,MAGT,qBAAKiB,UAAU,oBAAf,SACE,+BAAOjB,MAGX,qBACEiB,UAAWzB,EAAW,mBAAqB,wBAD7C,SAGE,wBAAQyB,UAAU,kBAAkBoB,KAAK,SAAzC","file":"static/js/29.0343ff47.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport \"./support.css\";\n\nexport default function Support(props) {\n  const { getLogin, wideView } = props;\n\n  // State variables for the support form, status of the support request and whether that status is being shown.\n  const [form, setForm] = useState({\n    EmailSubject: \"\",\n    EmailBody: \"\",\n  });\n  const [showStatus, setShowStatus] = useState(false);\n  const [status, setStatus] = useState(\"-\");\n\n  // useEffect hook that runs a single time when this component loads. Sets the title of the web page appropriately. A check is then performed on whether the user is logged in on the UI. If not, the user is returned to the root path.\n  useEffect(() => {\n    document.title = \"Support | Demeter - The plant meter\";\n\n    if (getLogin() === null) {\n      window.location.pathname = \"/\";\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  // Updates the form state variable with the appropriate input field whenever a form input field is updated.\n  const handleChange = (e) => {\n    const input = e.target;\n    const tempForm = _.cloneDeep(form);\n    tempForm[input.name] = input.value;\n    setForm(tempForm);\n  };\n\n  // Handles the submit event of the support form. Sets the request status appropriately, then performs a POST request to the backend support endpoint. If this request is successful, the user is taken to the 'Support successful' page. Otherwise, an appropriate error message is shown.\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setStatus(\"Please wait...\");\n    setShowStatus(true);\n\n    const login = getLogin();\n    if (login !== null) {\n      const { token } = login;\n      axios\n        .post(\n          \"https://smart-plant.azurewebsites.net/api/user/contactsupport\",\n          form,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          }\n        )\n        .then((res) => {\n          window.location.pathname = \"/support-successful\";\n        })\n        .catch((err) => {\n          let errorMessage = \"Server error. Please try again later.\";\n          const errors = err.response.data.errors;\n\n          if (errors.EmailSubject !== undefined) {\n            errorMessage = errors.EmailSubject[0];\n          } else if (errors.EmailBody !== undefined) {\n            errorMessage = errors.EmailBody[0];\n          }\n\n          setStatus(errorMessage);\n        });\n    } else {\n      setStatus(\"You are not logged in.\");\n      setTimeout(() => {\n        window.location.pathname = \"/\";\n      }, 500);\n    }\n  };\n\n  return (\n    <section>\n      <h1 className=\"gold text-center\">Support</h1>\n      <form\n        className={wideView ? \"w-25 m-auto mt-4\" : \"m-auto mt-4 px-2\"}\n        onSubmit={handleSubmit}\n      >\n        <label className=\"form-label gold\" htmlFor=\"EmailSubject\">\n          Subject\n        </label>\n        <input\n          className=\"form-control\"\n          name=\"EmailSubject\"\n          type=\"text\"\n          value={form.EmailSubject}\n          onChange={handleChange}\n          required\n        />\n        <label className=\"form-label mt-3 gold\" htmlFor=\"EmailBody\">\n          Message\n        </label>\n        <textarea\n          className=\"form-control\"\n          name=\"EmailBody\"\n          value={form.EmailBody}\n          onChange={handleChange}\n          required\n        ></textarea>\n\n        {showStatus ? (\n          <div className=\"text-center mt-3\">\n            <span>{status}</span>\n          </div>\n        ) : (\n          <div className=\"hidden-field mt-3\">\n            <span>{status}</span>\n          </div>\n        )}\n        <div\n          className={wideView ? \"text-center mt-3\" : \"text-center mt-3 mb-2\"}\n        >\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Send\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n}\n"],"sourceRoot":""}