{"version":3,"sources":["hooks/all_plants/all_plants.jsx"],"names":["AllPlants","props","wideView","Pagination","lazy","useState","plants","setPlants","useEffect","document","title","login","getLogin","token","axios","get","headers","Authorization","then","res","plantsFound","data","length","sortedPlants","sort","a","b","nameA","name","nameB","catch","err","window","location","pathname","className","to","style","color","fallback","items","itemID","heading1","heading2","imageCol","itemTitle1","itemTitle2","path"],"mappings":"oOAKe,SAASA,EAAUC,GAChC,IAAQC,EAAaD,EAAbC,SAGFC,EAAaC,gBAAK,kBAAM,gCAG9B,EAA4BC,mBAAS,qBAArC,mBAAOC,EAAP,KAAeC,EAAf,KA2CA,OAtCAC,qBAAU,WACRC,SAASC,MAAQ,qCAEjB,IAAMC,EAAQV,EAAMW,WACpB,GAAc,OAAVD,EAAgB,CAClB,IAAQE,EAAUF,EAAVE,MACRC,IACGC,IAAI,mDAAoD,CACvDC,QAAS,CACPC,cAAc,UAAD,OAAYJ,MAG5BK,MAAK,SAACC,GACL,IAAMC,EAAcD,EAAIE,KAExB,GAAID,EAAYE,OAAS,EAAG,CAC1B,IAAMC,EAAeH,EAAYI,MAAK,SAACC,EAAGC,GACxC,IAAMC,EAAQF,EAAEG,KACdC,EAAQH,EAAEE,KACZ,OAAOD,EAAQE,GAAS,EAAIF,EAAQE,EAAQ,EAAI,KAElDtB,EAAUgB,QAEVhB,EAAU,yBAGbuB,OAAM,SAACC,GACNxB,EACE,kFAINyB,OAAOC,SAASC,SAAW,MAI5B,IAGD,oCACE,oBAAIC,UAAU,mBAAd,oBACCjC,EACC,qBAAKiC,UAAU,oBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,IAAD,CAAsBA,UAAU,kBAAkBC,GAAG,aAArD,sBAAU,eAIZ,qBAAKD,UAAU,mBAInB,qBAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CAEEA,UAAU,uBACVC,GAAG,aAHL,sBACM,eAQS,kBAAX9B,EACN,qBACE6B,UAAWjC,EAAW,mBAAqB,wBAC3CmC,MAAO,CAAEC,MAAO,SAFlB,SAIGhC,IAGH,cAAC,WAAD,CAAUiC,SAAU,wBAApB,SACE,cAACpC,EAAD,CACEqC,MAAOlC,EACPmC,OAAO,UACPC,SAAS,OACTC,SAAS,UACTC,UAAU,EACVC,WAAW,OACXC,WAAW,YACXC,KAAK,QACL7C,SAAUA","file":"static/js/11.f4602b3a.chunk.js","sourcesContent":["import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./all_plants.css\";\n\nexport default function AllPlants(props) {\n  const { wideView } = props;\n\n  // Constant for the lazy-loaded dynamic import of the Pagination hook. This enables good code-splitting and faster page loading.\n  const Pagination = lazy(() => import(\"../pagination/pagination\"));\n\n  // State variable for the user's plants. Initially set to 'Loading plants...' while the plants are being fetched from the backend.\n  const [plants, setPlants] = useState(\"Loading plants...\");\n\n  // useEffect hook that runs a single time when this component loads. Sets the title of the web page appropriately, then performs a check on whether the user is logged in on the UI. If not, the user is returned to the root path.\n  // Otherwise, a GET request is made to Plants endpoint of the backend. If this request is unsuccessful, the plants state variable is set to an appropriate error message.\n  // Otherwise, a check is performed on whether the returned plants array has a length greater than 0. If so, the plants state variable is updated with the array's sorted contents. Otherwise, the plants state variable is updated with an appropriate message.\n  useEffect(() => {\n    document.title = \"Plants | Demeter - The plant meter\";\n\n    const login = props.getLogin();\n    if (login !== null) {\n      const { token } = login;\n      axios\n        .get(\"https://smart-plant.azurewebsites.net/api/Plants\", {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        .then((res) => {\n          const plantsFound = res.data;\n\n          if (plantsFound.length > 0) {\n            const sortedPlants = plantsFound.sort((a, b) => {\n              const nameA = a.name,\n                nameB = b.name;\n              return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;\n            });\n            setPlants(sortedPlants);\n          } else {\n            setPlants(\"No current plants.\");\n          }\n        })\n        .catch((err) => {\n          setPlants(\n            \"There was an error retrieving your plant data. Please try again later.\"\n          );\n        });\n    } else {\n      window.location.pathname = \"/\";\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <section>\n      <h1 className=\"text-center gold\">Plants</h1>\n      {wideView ? (\n        <div className=\"container m-0 p-0\">\n          <div className=\"row\">\n            <div className=\"col-xl-2 text-center\">\n              <Link key=\"add-plant\" className=\"btn btn-primary\" to=\"/add-plant\">\n                Add plant\n              </Link>\n            </div>\n            <div className=\"col-xl-10\"></div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center\">\n          <Link\n            key=\"add-plant\"\n            className=\"btn btn-primary mt-2\"\n            to=\"/add-plant\"\n          >\n            Add plant\n          </Link>\n        </div>\n      )}\n      {typeof plants === \"string\" ? (\n        <div\n          className={wideView ? \"text-center mt-3\" : \"text-center mt-3 mb-2\"}\n          style={{ color: \"white\" }}\n        >\n          {plants}\n        </div>\n      ) : (\n        <Suspense fallback={<div></div>}>\n          <Pagination\n            items={plants}\n            itemID=\"plantID\"\n            heading1=\"Name\"\n            heading2=\"Variety\"\n            imageCol={true}\n            itemTitle1=\"name\"\n            itemTitle2=\"plantType\"\n            path=\"plant\"\n            wideView={wideView}\n          ></Pagination>\n        </Suspense>\n      )}\n    </section>\n  );\n}\n"],"sourceRoot":""}